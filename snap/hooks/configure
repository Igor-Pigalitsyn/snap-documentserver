#!/bin/sh
#snapctl set ports.http=80
#snapctl restart onlyoffice-documentserver.nginx
#snap restart onlyoffice-documentserver.nginx

# USER=postgres
# PASS=postgres
# DIR=/home/$USER

# 	if grep $USER /etc/passwd; then
# 		echo "The user $USER Exists"
# 	else
# 		useradd $USER -p $(openssl passwd -1 $PASS) -U -m -d $DIR  -s /bin/bash; chown -R $USER:$USER $DIR;
# 	fi

create_rabbitmq_user(){
	if ! getent group rabbitmq >/dev/null; then
		addgroup --system rabbitmq
	fi

	# create rabbitmq user
	if ! getent passwd rabbitmq >/dev/null; then
		adduser --system \
		--ingroup rabbitmq \
		--home /var/lib/rabbitmq \
                --no-create-home \
		--gecos "RabbitMQ messaging server" \
                --disabled-login rabbitmq
	fi

}

create_rabbitmq_user

# DIR="$SNAP/var/www/onlyoffice/documentserver"
# LOG_DIR="$SNAP_DATA/var/log/onlyoffice/documentserver"
# APP_DIR="$SNAP/var/lib/onlyoffice/documentserver"
# CONF_DIR="$SNAP_DATA/etc/onlyoffice/documentserver"

# DB_HOST="localhost"
# DB_USER="onlyoffice"
# DB_PWD="onlyoffice"
# DB_NAME="onlyoffice"

# install_db(){
#         CONNECTION_PARAMS=" -U$DB_USER -w"
#         if [ -n "$DB_PWD" ]; then
#                 export PGPASSWORD=$DB_PWD
#         fi

#         PSQL="$SNAP/usr/bin/wrapper-psql -h 127.0.0.1 -d postgres -q $CONNECTION_PARAMS"
#         CREATEDB="$SNAP/usr/bin/createdb $CONNECTION_PARAMS"

# 	# test postgresql connection
# 	set +e
#         $PSQL -c ";" &>/dev/null
#         ERRCODE=$?
#         if [ $ERRCODE -ne 0 ]; then
#                 service postgresql start &>/dev/null
#                 $PSQL -c ";" &>/dev/null || { echo "ERROR: can't connect to postgressql database"; exit 1; }
#         fi
# 	set -e

#         if ! $PSQL -lt | cut -d\| -f 1 | grep -qw $DB_NAME; then
#                 $CREATEDB $DB_NAME >/dev/null 2>&1
#         fi

#         if [ ! "$CLUSTER_MODE" = true ]; then
#                 $PSQL -d "$DB_NAME" -f "$DIR/server/schema/postgresql/removetbl.sql" >/dev/null 2>&1
#         fi
#         $PSQL -d "$DB_NAME" -f "$DIR/server/schema/postgresql/createdb.sql" >/dev/null 2>&1
# }

# install_db


cp  -R $SNAP/etc $SNAP_DATA/

DEFAULT_HTTP_PORT="80"
DEFAULT_SQL_PORT="5432"

nginx_http_port()
{
	http_port="$(http_port)"
	previous_http_port="$(previous_http_port)"

	# If no changes were requested, then there's nothing to do here.
	if [ "$http_port" = "$previous_http_port" ]; then
		return 0
	fi
	set_http_port "$http_port"
	set_previous_http_port $http_port
	sed -i -e "s/${previous_http_port}/${http_port}/g" $SNAP_DATA/etc/nginx/conf.d/ds.conf
	snapctl restart onlyoffice-documentserver.nginx
}

set_http_port()
{
	snapctl set ports.http="$1"
}

http_port()
{
	port="$(snapctl get ports.http)"
	if [ -z "$port" ]; then
		port="$DEFAULT_HTTP_PORT"
		set_http_port $port
		set_previous_http_port $port
	fi

	echo "$port"
}

previous_http_port()
{
	snapctl get private.ports.http
}

set_previous_http_port()
{
	snapctl set private.ports.http="$1"
}

db_sql_port()
{
	sql_port="$(sql_port)"
	previous_sql_port="$(previous_sql_port)"

	# If no changes were requested, then there's nothing to do here.
	if [ "$sql_port" = "$previous_sql_port" ]; then
		return 0
	fi
	set_sql_port "$sql_port"
	set_previous_sql_port $sql_port
	sed -i -e "s/${previous_sql_port}/${sql_port}/g" $SNAP_DATA/etc/onlyoffice/documentserver/default.json
	snapctl restart onlyoffice-documentserver.onlyoffice-documentserver
}

previous_sql_port()
{
	snapctl get private.ports.sql
}

sql_port()
{
	port="$(snapctl get ports.sql)"
	if [ -z "$port" ]; then
		port="$DEFAULT_SQL_PORT"
		set_sql_port $port
		set_previous_sql_port $port
	fi

	echo "$port"
}

set_previous_sql_port()
{
	snapctl set private.ports.sql="$1"
}
set_sql_port()
{
	snapctl set ports.sql="$1"
}

nginx_http_port
db_sql_port
